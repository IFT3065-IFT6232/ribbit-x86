#!/usr/bin/chezscheme --program

;; @generated by Idris 0.5.1, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])

(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define blodwen-toSignedInt
  (lambda (x bits)
    (if (logbit? bits x)
        (logor x (ash (- 1) bits))
        (logand x (- (ash 1 bits) 1)))))

(define blodwen-toUnsignedInt
  (lambda (x bits)
    (modulo x (ash 1 bits))))


(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (quotient x y) bits)))

(define b+ (lambda (x y bits) (remainder (+ x y) (ash 1 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (ash 1 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (ash 1 bits))))
(define b/ (lambda (x y bits) (remainder (exact-floor (/ x y)) (ash 1 bits))))

(define integer->bits8 (lambda (x) (modulo x (expt 2 8))))
(define integer->bits16 (lambda (x) (modulo x (expt 2 16))))
(define integer->bits32 (lambda (x) (modulo x (expt 2 32))))
(define integer->bits64 (lambda (x) (modulo x (expt 2 64))))

(define bits16->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits64->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits32 (lambda (x) (modulo x (expt 2 32))))

(define blodwen-bits-shl-signed (lambda (x y bits) (blodwen-toSignedInt (ash x y) bits)))

(define blodwen-bits-shl (lambda (x y bits) (remainder (ash x y) (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))

(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define System-prim__exit (lambda (farg-0 farg-1) ((foreign-procedure "exit" (int) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__putChar (lambda (farg-0 farg-1) ((foreign-procedure "putchar" (char) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getChar (lambda (farg-0) ((foreign-procedure "getchar" () char) )))
(define csegen-19(blodwen-lazy (lambda () (vector 0 (bs- (blodwen-toSignedInt 0 63) (blodwen-toSignedInt 999 63) 63)))))
(define csegen-38(blodwen-lazy (lambda () (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-422) (lambda (eta-0) (PreludeC-45IO-u--map_Functor_IO u--func arg-422 eta-0)))))) (lambda (u--a) (lambda (arg-1124) (lambda (eta-0) arg-1124))) (lambda (u--b) (lambda (u--a) (lambda (arg-1130) (lambda (arg-1137) (lambda (eta-0) (let ((act-17 (arg-1130 eta-0))) (let ((act-16 (arg-1137 eta-0))) (act-17 act-16))))))))) (lambda (u--b) (lambda (u--a) (lambda (arg-1605) (lambda (arg-1608) (lambda (eta-0) (let ((act-24 (arg-1605 eta-0))) ((arg-1608 act-24) eta-0))))))) (lambda (u--a) (lambda (arg-1619) (lambda (eta-0) (let ((act-51 (arg-1619 eta-0))) (act-51 eta-0)))))) (lambda (u--a) (lambda (arg-10778) arg-10778))))))
(define csegen-39(blodwen-lazy (lambda () (DataC-45IORef-newIORef (csegen-38) (blodwen-toSignedInt 0 63)))))
(define u--prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define u--prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define Main-writeAndReturn (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (let ((u--x (cast-int-char e-0))) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-2))) e-1) (PreludeC-45IO-putChar arg-2 u--x) (lambda () (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) arg-1)))))))))(else (Main-error "this is bad :/" arg-2)))))
(define Main-unsafeIndex (lambda (arg-0 arg-1) (if (null? arg-0) -1 (let ((e-1 (car arg-0))) (let ((e-2 (cdr arg-0))) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) e-1) (else (Main-unsafeIndex e-2 (bs- arg-1 1 63))))))))))
(define Main-sym (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rListTail (let ((e-6 (vector-ref arg-1 5))) e-6) arg-2 arg-3)) (lambda (u--tail) (let ((e-7 (car arg-3))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCar u--tail arg-3)) (lambda (u--r) (Main-rCar u--tail arg-3)))))))))))
(define Main-setupGlobal (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-MakeRib (let ((e-7 (vector-ref arg-1 4))) e-7) (vector 0 0) (let ((e-6 (vector-ref arg-1 5))) e-6) (vector 0 1) arg-2)) (lambda (u--primitive0) (let ((u--symtbl (let ((e-6 (vector-ref arg-1 5))) e-6))) (let ((e-7 (car arg-2))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-setGlobal u--symtbl u--primitive0 arg-2)) (lambda (symtbl-0) (let ((e-12 (car arg-2))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-setGlobal symtbl-0 (let ((e-20 (vector-ref arg-1 1))) e-20) arg-2)) (lambda (symtbl-1) (let ((e-17 (car arg-2))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-setGlobal symtbl-1 (let ((e-0 (vector-ref arg-1 0))) e-0) arg-2)) (lambda (symtbl-2) (Main-setGlobal symtbl-2 (let ((e-24 (vector-ref arg-1 2))) e-24) arg-2))))))))))))))))))))
(define Main-setVar (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rListTail arg-1 e-0 arg-4)) (lambda (u--stackTail) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCar u--stackTail arg-4)) (lambda (u--stackTailCar) (Main-setCar u--stackTailCar arg-3 arg-4)))))))))))(else (Main-setCar arg-2 arg-3 arg-4)))))
(define Main-setGlobal (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-1 arg-3)) (lambda (u--symCar) (PreludeC-45Interfaces-C-62C-62 (let ((e-7 (car arg-3))) e-7) (Main-setCar u--symCar arg-2 arg-3) (lambda () (Main-rCdr arg-1 arg-3)))))))))
(define Main-setCgr (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--ref) (let ((u--v (vector (let ((e-9 (vector-ref u--ref 0))) e-9) (let ((e-8 (vector-ref u--ref 1))) e-8) (let ((e-7 (vector-ref u--ref 2))) e-7) arg-2))) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (set-box! e-0 u--v)))))))))))(else (Main-error "Third argument of setcar is not a rib" arg-3)))))
(define Main-setCdr (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--ref) (let ((u--v (vector (let ((e-9 (vector-ref u--ref 0))) e-9) (let ((e-8 (vector-ref u--ref 1))) e-8) arg-2 (let ((e-6 (vector-ref u--ref 3))) e-6)))) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (set-box! e-0 u--v)))))))))))(else (Main-error "Second argument of setcar is not a rib" arg-3)))))
(define Main-setCar (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--ref) (let ((u--v (vector (let ((e-9 (vector-ref u--ref 0))) e-9) arg-2 (let ((e-7 (vector-ref u--ref 2))) e-7) (let ((e-6 (vector-ref u--ref 3))) e-6)))) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (set-box! e-0 u--v)))))))))))(else (Main-error "First argument of setcar is not a rib" arg-3)))))
(define Main-setAndReturn (lambda (arg-1 arg-2 arg-3 arg-4) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-4))) e-1) (((arg-1 arg-2) arg-3) arg-4) (lambda () (let ((e-1 (car arg-4))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) arg-3))))))))
(define Main-run (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-2 arg-5)) (lambda (u--instr) (let ((e-7 (car arg-5))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-2 arg-5)) (lambda (u--opnd) (let ((e-12 (car arg-5))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCgr arg-2 arg-5)) (lambda (u--next) (let ((e-17 (car arg-5))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-rToInt u--instr arg-5)) (lambda (u--v) (case (vector-ref u--instr 0) ((0) (let ((e-0 (vector-ref u--instr 1))) (cond ((equal? e-0 0) (let ((e-22 (car arg-5))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-getVar arg-3 u--opnd arg-5)) (lambda (u--proc) (let ((e-27 (car arg-5))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCar u--proc arg-5)) (lambda (u--code) (let ((e-32 (car arg-5))) (let ((e-34 (vector-ref e-32 1))) ((((e-34 'erased) 'erased) (let ((e-37 (car arg-5))) (let ((e-40 (vector-ref e-37 0))) (let ((e-42 (vector-ref e-40 1))) ((e-42 'erased) (Main-rIsRib u--code)))))) (lambda (u--codeIsRib) (cond ((equal? u--codeIsRib 1) (let ((e-37 (car arg-5))) (let ((e-39 (vector-ref e-37 1))) ((((e-39 'erased) 'erased) (let ((e-42 (car arg-5))) (let ((e-45 (vector-ref e-42 0))) (let ((e-47 (vector-ref e-45 1))) ((e-47 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (Main-MakeRib (let ((e-50 (vector-ref arg-1 4))) e-50) eta-0 eta-1 eta-2 eta-3)))))))))) (lambda (u--ribCreator) (let ((e-42 (car arg-5))) (let ((e-44 (vector-ref e-42 1))) ((((e-44 'erased) 'erased) ((((u--ribCreator (vector 0 0)) u--proc) (vector 0 0)) arg-5)) (lambda (u--newCont) (let ((e-47 (car arg-5))) (let ((e-49 (vector-ref e-47 1))) ((((e-49 'erased) 'erased) (Main-rCar u--code arg-5)) (lambda (u--codeCar) (let ((e-52 (car arg-5))) (let ((e-54 (vector-ref e-52 1))) ((((e-54 'erased) 'erased) (Main-rToInt u--codeCar arg-5)) (lambda (u--codeCarInt) (Main-lmdaCall arg-1 u--code u--next u--codeCarInt u--newCont u--newCont arg-3 arg-4 arg-5)))))))))))))))))) (else (let ((e-37 (car arg-5))) (let ((e-39 (vector-ref e-37 1))) ((((e-39 'erased) 'erased) (Main-rToInt u--code arg-5)) (lambda (u--codeInt) (let ((e-42 (car arg-5))) (let ((e-44 (vector-ref e-42 1))) ((((e-44 'erased) 'erased) (Main-primitive arg-1 u--codeInt arg-3 arg-5)) (lambda (u--stack) (let ((e-47 (car arg-5))) (let ((e-49 (vector-ref e-47 1))) ((((e-49 'erased) 'erased) (let ((e-52 (car arg-5))) (let ((e-55 (vector-ref e-52 0))) (let ((e-57 (vector-ref e-55 1))) ((e-57 'erased) (Main-rIsRib u--next)))))) (lambda (u--nextIsRib) (let ((e-52 (car arg-5))) (let ((e-54 (vector-ref e-52 1))) ((((e-54 'erased) 'erased) (cond ((equal? u--nextIsRib 1) (let ((e-57 (car arg-5))) (let ((e-60 (vector-ref e-57 0))) (let ((e-62 (vector-ref e-60 1))) ((e-62 'erased) u--next))))) (else (let ((e-57 (car arg-5))) (let ((e-59 (vector-ref e-57 1))) ((((e-59 'erased) 'erased) (Main-getCont u--stack arg-5)) (lambda (u--cont) (let ((e-62 (car arg-5))) (let ((e-64 (vector-ref e-62 1))) ((((e-64 'erased) 'erased) (Main-rCar u--cont arg-5)) (lambda (u--contCar) (PreludeC-45Interfaces-C-62C-62 (let ((e-67 (car arg-5))) e-67) (Main-setCdr u--stack u--contCar arg-5) (lambda () (Main-rCgr u--cont arg-5)))))))))))))) (lambda (u--output) (Main-run arg-1 u--output u--stack (bs+ arg-4 1 63) arg-5)))))))))))))))))))))))))))))))) ((equal? e-0 1) (let ((e-22 (car arg-5))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-rCar arg-3 arg-5)) (lambda (u--stackCar) (let ((e-27 (car arg-5))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCdr arg-3 arg-5)) (lambda (u--stackCdr) (PreludeC-45Interfaces-C-62C-62 (let ((e-32 (car arg-5))) e-32) (Main-setVar arg-3 u--opnd u--stackCar arg-5) (lambda () (Main-run arg-1 u--next u--stackCdr (bs+ arg-4 1 63) arg-5)))))))))))) ((equal? e-0 2) (let ((e-22 (car arg-5))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-getVar arg-3 u--opnd arg-5)) (lambda (u--opndVar) (let ((e-27 (car arg-5))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCons arg-1 u--opndVar arg-3 arg-5)) (lambda (u--newStack) (Main-run arg-1 u--next u--newStack (bs+ arg-4 1 63) arg-5)))))))))) ((equal? e-0 3) (let ((e-22 (car arg-5))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-rCons arg-1 u--opnd arg-3 arg-5)) (lambda (u--newStack) (Main-run arg-1 u--next u--newStack (bs+ arg-4 1 63) arg-5)))))) ((equal? e-0 4) (let ((e-22 (car arg-5))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-rCar arg-3 arg-5)) (lambda (u--stackCar) (let ((e-27 (car arg-5))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCdr arg-3 arg-5)) (lambda (u--stackCdr) (let ((e-32 (car arg-5))) (let ((e-34 (vector-ref e-32 1))) ((((e-34 'erased) 'erased) (Main-C-61C-61 u--stackCar (let ((e-40 (vector-ref arg-1 1))) e-40) arg-5)) (lambda (u--isFalse) (cond ((equal? u--isFalse 1) (Main-run arg-1 u--next u--stackCdr (bs+ arg-4 1 63) arg-5)) (else (Main-run arg-1 u--opnd u--stackCdr (bs+ arg-4 1 63) arg-5)))))))))))))))) ((equal? e-0 5) (PreludeC-45IO-putStr arg-5 ""))(else (Main-error "Unknown instruction" arg-5)))))(else (Main-error "Unknown instruction" arg-5)))))))))))))))))))))
(define Main-rToInt (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) e-0))))))(else (Main-error "Cannot cast rib to int" arg-2)))))
(define Main-rStringToUninternedSymbol (lambda (arg-1 arg-2 arg-3) (Main-MakeRib (let ((e-4 (vector-ref arg-1 4))) e-4) (let ((e-1 (vector-ref arg-1 1))) e-1) arg-2 (vector 0 2) arg-3)))
(define Main-rListToString (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rLength arg-2 arg-3)) (lambda (u--l) (Main-MakeRib (let ((e-7 (vector-ref arg-1 4))) e-7) arg-2 (vector 0 u--l) (vector 0 3) arg-3)))))))
(define Main-rListTail (lambda (arg-1 arg-2 arg-3) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int 0 arg-2))) (cond ((equal? sc0 1) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCdr arg-1 arg-3)) (lambda (u--cdr) (Main-rListTail u--cdr (bs- arg-2 1 63) arg-3)))))) (else (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) arg-1)))))))))
(define Main-rLength (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rIsPair arg-1 arg-2)) (lambda (u--isPair) (cond ((equal? u--isPair 1) (let ((e-7 (car arg-2))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-1 arg-2)) (lambda (u--cdr) (let ((e-12 (car arg-2))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rLength u--cdr arg-2)) (lambda (u--l) (let ((e-17 (car arg-2))) (let ((e-20 (vector-ref e-17 0))) (let ((e-22 (vector-ref e-20 1))) ((e-22 'erased) (bs+ (blodwen-toSignedInt 1 63) u--l 63)))))))))))))) (else (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (blodwen-toSignedInt 0 63)))))))))))))
(define Main-rIsRib (lambda (arg-0) (case (vector-ref arg-0 0) ((1) 1) (else 0))))
(define Main-rIsPair (lambda (ext-0 ext-1) (Main-rIsInstance 0 ext-0 ext-1)))
(define Main-rIsInstance (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-2 0) ((1) (let ((e-0 (vector-ref arg-2 1))) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-3))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--rib) (let ((e-7 (car arg-3))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rToInt (let ((e-11 (vector-ref u--rib 3))) e-11) arg-3)) (lambda (u--val) (let ((e-12 (car arg-3))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--val arg-1)))))))))))))))(else (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) 0))))))))
(define Main-rEqv (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-C-61C-61 arg-2 arg-3 arg-4)) (lambda (u--isTrue) (cond ((equal? u--isTrue 1) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (let ((e-0 (vector-ref arg-1 0))) e-0)))))) (else (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (let ((e-18 (vector-ref arg-1 1))) e-18)))))))))))))
(define Main-rCons (lambda (arg-1 arg-2 arg-3 arg-4) (Main-MakeRib (let ((e-4 (vector-ref arg-1 4))) e-4) arg-2 arg-3 (vector 0 0) arg-4)))
(define Main-rCgr (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--v) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (let ((e-14 (vector-ref u--v 3))) e-14)))))))))))(else (Main-error "Cannot cgr on number" arg-2)))))
(define Main-rCdr (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--v) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (let ((e-15 (vector-ref u--v 2))) e-15)))))))))))(else (Main-error "Cannot cdr on number" arg-2)))))
(define Main-rCar (lambda (arg-1 arg-2) (case (vector-ref arg-1 0) ((1) (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox e-0))))) (lambda (u--v) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (let ((e-16 (vector-ref u--v 1))) e-16)))))))))))(else (Main-error "Cannot car on number" arg-2)))))
(define Main-primitive (lambda (arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-2 0) (let ((u--globalCounter (let ((e-4 (vector-ref arg-1 4))) e-4))) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (Main-MakeRib u--globalCounter eta-0 eta-1 eta-2 eta-3)))))))))) (lambda (u--ribCreator) (Main-prim3 arg-1 u--ribCreator arg-3 arg-4))))))) ((equal? arg-2 1) (let ((e-1 (car arg-4))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) arg-3))))) ((equal? arg-2 2) (Main-rCdr arg-3 arg-4)) ((equal? arg-2 3) (Main-prim2 arg-1 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-arg2 eta-0 eta-1 eta-2)))) arg-3 arg-4)) ((equal? arg-2 4) (Main-close arg-1 arg-3 arg-4)) ((equal? arg-2 5) (Main-prim1Pure arg-1 (lambda (u--x) (let ((sc1 (Main-rIsRib u--x))) (cond ((equal? sc1 1) (let ((e-0 (vector-ref arg-1 0))) e-0)) (else (let ((e-1 (vector-ref arg-1 1))) e-1))))) arg-3 arg-4)) ((equal? arg-2 6) (Main-prim1 arg-1 (lambda (eta-0) (lambda (eta-1) (Main-rCar eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 7) (Main-prim1 arg-1 (lambda (eta-0) (lambda (eta-1) (Main-rCdr eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 8) (Main-prim1 arg-1 (lambda (eta-0) (lambda (eta-1) (Main-rCgr eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 9) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-setAndReturn (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (Main-setCar eta-3 eta-4 eta-5)))) eta-0 eta-1 eta-2))))))))) (lambda (u--foo) (Main-prim2 arg-1 u--foo arg-3 arg-4)))))) ((equal? arg-2 10) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-setAndReturn (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (Main-setCdr eta-3 eta-4 eta-5)))) eta-0 eta-1 eta-2))))))))) (lambda (u--foo) (Main-prim2 arg-1 u--foo arg-3 arg-4)))))) ((equal? arg-2 11) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-setAndReturn (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (Main-setCgr eta-3 eta-4 eta-5)))) eta-0 eta-1 eta-2))))))))) (lambda (u--foo) (Main-prim2 arg-1 u--foo arg-3 arg-4)))))) ((equal? arg-2 12) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-rEqv arg-1 eta-0 eta-1 eta-2))))))))) (lambda (u--foo) (Main-prim2 arg-1 u--foo arg-3 arg-4)))))) ((equal? arg-2 13) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-4))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (Main-lessthan arg-1 eta-0 eta-1 eta-2))))))))) (lambda (u--foo) (Main-prim2 arg-1 u--foo arg-3 arg-4)))))) ((equal? arg-2 14) (Main-prim2Pure arg-1 (lambda (eta-0) (lambda (eta-1) (Main-opRInt (lambda (eta-2) (lambda (eta-3) (bs+ eta-2 eta-3 63))) eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 15) (Main-prim2Pure arg-1 (lambda (eta-0) (lambda (eta-1) (Main-opRInt (lambda (eta-2) (lambda (eta-3) (bs- eta-2 eta-3 63))) eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 16) (Main-prim2Pure arg-1 (lambda (eta-0) (lambda (eta-1) (Main-opRInt (lambda (eta-2) (lambda (eta-3) (bs* eta-2 eta-3 63))) eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 17) (Main-prim2Pure arg-1 (lambda (eta-0) (lambda (eta-1) (Main-opRInt (lambda (eta-2) (lambda (eta-3) (PreludeC-45Num-u--div_Integral_Int eta-2 eta-3))) eta-0 eta-1))) arg-3 arg-4)) ((equal? arg-2 18) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-4))) ((e-6 'erased) (lambda (eta-0) (unbox (let ((e-10 (vector-ref arg-1 3))) e-10)))))) (lambda (u--pos) (let ((sc2 (PreludeC-45EqOrd-u--C-60_Ord_Int u--pos 924))) (cond ((equal? sc2 1) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-getByte (let ((e-13 (vector-ref arg-1 3))) e-13) arg-4)) (lambda (u--v) (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--v (blodwen-toSignedInt 255 63)))) (cond ((equal? sc4 1) (Main-rCons arg-1 (vector 0 -1) arg-3 arg-4)) (else (Main-rCons arg-1 (vector 0 u--v) arg-3 arg-4))))))))) (else (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (PreludeC-45IO-getChar arg-4)) (lambda (u--x) (let ((u--v (cast-char-boundedInt u--x 63))) (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--v (blodwen-toSignedInt 255 63)))) (cond ((equal? sc4 1) (Main-rCons arg-1 (vector 0 -1) arg-3 arg-4)) (else (Main-rCons arg-1 (vector 0 u--v) arg-3 arg-4))))))))))))))))) ((equal? arg-2 19) (Main-prim1 arg-1 (lambda (eta-0) (lambda (eta-1) (Main-writeAndReturn eta-0 eta-1))) arg-3 arg-4))(else (Main-error (string-append "Primitive #" (string-append (number->string arg-2) " is not yet implemented ")) arg-4)))))
(define Main-prim3 (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-3 arg-4)) (lambda (u--z) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-3 arg-4)) (lambda (u--stack) (let ((e-12 (car arg-4))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCar u--stack arg-4)) (lambda (u--y) (let ((e-17 (car arg-4))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-rCdr u--stack arg-4)) (lambda (stack-0) (let ((e-22 (car arg-4))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-rCar stack-0 arg-4)) (lambda (u--x) (let ((e-27 (car arg-4))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCdr stack-0 arg-4)) (lambda (stack-1) (let ((e-32 (car arg-4))) (let ((e-34 (vector-ref e-32 1))) ((((e-34 'erased) 'erased) ((((arg-2 u--x) u--y) u--z) arg-4)) (lambda (u--newVal) (Main-rCons arg-1 u--newVal stack-1 arg-4)))))))))))))))))))))))))))))))
(define Main-prim2Pure (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-3 arg-4)) (lambda (u--y) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-3 arg-4)) (lambda (u--stack) (let ((e-12 (car arg-4))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCar u--stack arg-4)) (lambda (u--x) (let ((e-17 (car arg-4))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-rCdr u--stack arg-4)) (lambda (stack-0) (let ((u--newVal ((arg-2 u--x) u--y))) (Main-rCons arg-1 u--newVal stack-0 arg-4))))))))))))))))))))
(define Main-prim2 (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-3 arg-4)) (lambda (u--y) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-3 arg-4)) (lambda (u--stack) (let ((e-12 (car arg-4))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCar u--stack arg-4)) (lambda (u--x) (let ((e-17 (car arg-4))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-rCdr u--stack arg-4)) (lambda (stack-0) (let ((e-22 (car arg-4))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (((arg-2 u--x) u--y) arg-4)) (lambda (u--newVal) (Main-rCons arg-1 u--newVal stack-0 arg-4)))))))))))))))))))))))
(define Main-prim1Pure (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-3 arg-4)) (lambda (u--x) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-3 arg-4)) (lambda (u--stack) (let ((u--newVal (arg-2 u--x))) (Main-rCons arg-1 u--newVal u--stack arg-4))))))))))))
(define Main-prim1 (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-3 arg-4)) (lambda (u--x) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-3 arg-4)) (lambda (u--stack) (let ((e-12 (car arg-4))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) ((arg-2 u--x) arg-4)) (lambda (u--newVal) (Main-rCons arg-1 u--newVal u--stack arg-4)))))))))))))))
(define Main-opRInt (lambda (arg-0 arg-1 arg-2) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (case (vector-ref arg-2 0) ((0) (let ((e-1 (vector-ref arg-2 1))) (vector 0 ((arg-0 e-0) e-1))))(else (csegen-19)))))(else (csegen-19)))))
(define Main-main (lambda (ext-0) (Main-decodeAndRun ext-0)))
(define Main-lmdaCall (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((u--isNextRib (Main-rIsRib arg-3))) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int 0 arg-4))) (cond ((equal? sc0 1) (let ((u--nextNargs (bs- arg-4 1 63))) (let ((e-1 (car arg-9))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-7 arg-9)) (lambda (u--stackCar) (let ((e-7 (car arg-9))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-7 arg-9)) (lambda (u--stackCdr) (let ((e-12 (car arg-9))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCons arg-1 u--stackCar arg-5 arg-9)) (lambda (u--superNewStack) (Main-lmdaCall arg-1 arg-2 arg-3 u--nextNargs u--superNewStack arg-6 u--stackCdr arg-8 arg-9))))))))))))))) (else (cond ((equal? u--isNextRib 1) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-9))) e-1) (Main-setCar arg-6 arg-7 arg-9) (lambda () (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-9))) e-1) (Main-setCgr arg-6 arg-3 arg-9) (lambda () (let ((e-1 (car arg-9))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCgr arg-2 arg-9)) (lambda (u--codeCgr) (Main-run arg-1 u--codeCgr arg-5 (bs+ arg-8 1 63) arg-9)))))))))) (else (let ((e-1 (car arg-9))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getCont arg-7 arg-9)) (lambda (u--k) (let ((e-7 (car arg-9))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCar u--k arg-9)) (lambda (u--k0) (let ((e-12 (car arg-9))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCgr u--k arg-9)) (lambda (u--k2) (PreludeC-45Interfaces-C-62C-62 (let ((e-17 (car arg-9))) e-17) (Main-setCar arg-6 u--k0 arg-9) (lambda () (PreludeC-45Interfaces-C-62C-62 (let ((e-17 (car arg-9))) e-17) (Main-setCgr arg-6 u--k2 arg-9) (lambda () (let ((e-17 (car arg-9))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-rCgr arg-2 arg-9)) (lambda (u--codeCgr) (Main-run arg-1 u--codeCgr arg-5 (bs+ arg-8 1 63) arg-9)))))))))))))))))))))))))))))
(define Main-lessthan (lambda (arg-1 arg-2 arg-3 arg-4) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (case (vector-ref arg-3 0) ((0) (let ((e-1 (vector-ref arg-3 1))) (let ((sc2 (PreludeC-45EqOrd-u--C-60_Ord_Int e-0 e-1))) (cond ((equal? sc2 1) (let ((e-3 (car arg-4))) (let ((e-6 (vector-ref e-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (let ((e-15 (vector-ref arg-1 0))) e-15)))))) (else (let ((e-3 (car arg-4))) (let ((e-6 (vector-ref e-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (let ((e-14 (vector-ref arg-1 1))) e-14))))))))))(else (Main-error "Less than on ribs (non-numbers)" arg-4)))))(else (Main-error "Less than on ribs (non-numbers)" arg-4)))))
(define Main-ins(blodwen-lazy (lambda () (cons 20 (cons 30 (cons 0 (cons 10 (cons 11 (cons 4 '())))))))))
(define Main-getVar (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-2 0) ((0) (let ((e-0 (vector-ref arg-2 1))) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rListTail arg-1 e-0 arg-3)) (lambda (u--stackTail) (let ((e-7 (car arg-3))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCar u--stackTail arg-3)) (lambda (u--stackTailCar) (let ((e-12 (car arg-3))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) u--stackTailCar))))))))))))))(else (Main-rCar arg-2 arg-3)))))
(define Main-getInt (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getByte arg-1 arg-2)) (lambda (u--x) (let ((x-0 (Main-getCode u--x))) (let ((u--y (bs* arg-3 46 63))) (let ((sc1 (PreludeC-45EqOrd-u--C-60_Ord_Int x-0 46))) (cond ((equal? sc1 1) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (bs+ u--y x-0 63)))))) (else (Main-getInt arg-1 arg-2 (bs+ u--y (bs- x-0 46 63) 63)))))))))))))
(define Main-getCont (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCgr arg-1 arg-2)) (lambda (u--stackCgr) (let ((e-7 (car arg-2))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-1 arg-2)) (lambda (u--stackCdr) (let ((sc2 (Main-rIsRib u--stackCgr))) (cond ((equal? sc2 1) (let ((e-12 (car arg-2))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) arg-1))))) (else (Main-getCont u--stackCdr arg-2))))))))))))))
(define Main-getCode (lambda (arg-0) (let ((u--x (bs- arg-0 35 63))) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int u--x (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 1) 57) (else u--x))))))
(define Main-getByte (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getAndIncrement arg-1 arg-2)) (lambda (u--pos) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (cast-char-boundedInt (string-ref "$0dleif,1dleif,tsil>-rotcev,gnirts>-lobmys,?bir,!tes-1dleif,*,>,2dleif,?llun,?rotcev,?erudecorp,gnirts>-rebmun,tneitouq,?lobmys,esolc,gnirts>-tsil,?gnirts,ton,snoc,htgnel,+,tsil-etirw,tsil>-gnirts,xua-gnirts>-rebmun,-,<,rac,2gra,etirw,2rahctup,yalpsid,?ecnatsni,?riap,di,?vqe,srahc-etirw,rdc,rahctup,1gra,,,,bir;7$uI^[$V,i$7'Ll^>FiO~YGk^zi$!0(_>?^{!*,i$*a@_>?^*a@_>?^>?vS#~IBvS#_*a@_>?^*a@_>?^>?vS#~I^~^BvE^*a@_>?vS;>?vS#~Bt^*a@_>?vS9>?vS#~Bv0^*a@_>?vS5>?vS#~Bu^*a@_>?^~S`J^~D^{!8,i$,i$88@^>HJ^~D^>?vC~D^z!//YB^0vS7vF~YC^1YL^>?vF~YD^*i$N^~T^/YK^~W^(vL>O@^>HJ^>?vK~D^0vLvK~YE^0vS;vF~Bi%^0vS-vF~S^z!1/^(vE>Ai%N^>?vE~T^z!CEl!LiN!DEo!7iN!>#nQ_^z!=En!6,^6_`~KakRb^PLYHu``vR%YAu^{!B8>Mi&^8>RMi&L`kvP~Kk^z!G4__{>YIki#!KiM!@Em!:,k89Q@_l~D^z!E+i&^z!)iM!3iN!;#k`^{!-Ek!<+i$^z!.8?,i$+bYF^~YJ^zz!O:nq:k:k:k:k:k:ki&vS>vS(vS/vS,vS,vS@!,:lkl!':lkm!2:lkn!?:lko!J:lkp!N:lkq!M:lkr!F:lks!I:lku!+:lkv/!4:lkv0!9:lkv1!5:lkv2!H:lkv3!A:lkv4!(:lkv6y" u--pos) 63)))))))))))
(define Main-getAndIncrement (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox arg-1))))) (lambda (u--v) (PreludeC-45Interfaces-C-62C-62 (let ((e-7 (car arg-2))) e-7) (DataC-45IORef-modifyIORef arg-2 arg-1 (lambda (arg-0) (bs+ arg-0 1 63))) (lambda () (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) u--v))))))))))))
(define Main-error (lambda (arg-2 arg-3) (PreludeC-45Interfaces-C-62C-62 (let ((e-1 (car arg-3))) e-1) (PreludeC-45IO-putStrLn arg-3 (string-append "*** error : " arg-2)) (lambda () (System-exitFailure arg-3)))))
(define Main-decodeStackAux (lambda (arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((u--d (Main-unsafeIndex (Main-ins) arg-2))) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int (bs+ u--d 2 63) arg-3))) (cond ((equal? sc0 1) (Main-decodeStackAux arg-1 (bs+ arg-2 1 63) (bs- arg-3 (bs+ u--d 3 63) 63) arg-4 arg-5 arg-6)) (else (let ((sc1 (PreludeC-45EqOrd-u--C-60_Ord_Int 90 arg-4))) (cond ((equal? sc1 1) (let ((e-1 (car arg-6))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCdr arg-5 arg-6)) (lambda (u--cdrStack) (let ((e-7 (car arg-6))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCar arg-5 arg-6)) (lambda (u--carStack) (Main-addInstruction arg-1 (vector 0 4) u--carStack u--cdrStack arg-6)))))))))) (else (let ((e-1 (car arg-6))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-2 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (Main-rCons arg-1 (vector 0 0) arg-5 arg-6)) (else (let ((e-7 (car arg-6))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) arg-5)))))))) (lambda (u--stack) (let ((e-7 (car arg-6))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (let ((sc4 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-3 u--d))) (cond ((equal? sc4 1) (let ((sc5 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-2 (blodwen-toSignedInt 3 63)))) (cond ((equal? sc5 1) (Main-sym arg-1 arg-3 arg-6)) (else (let ((e-12 (car arg-6))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 0 arg-3))))))))) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-3 u--d))) (cond ((equal? sc5 1) (let ((e-12 (car arg-6))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-getInt (let ((e-18 (vector-ref arg-1 3))) e-18) arg-6 0)) (lambda (u--v) (let ((e-17 (car arg-6))) (let ((e-20 (vector-ref e-17 0))) (let ((e-22 (vector-ref e-20 1))) ((e-22 'erased) (vector 0 u--v)))))))))) (else (let ((e-12 (car arg-6))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-getInt (let ((e-18 (vector-ref arg-1 3))) e-18) arg-6 (bs- (bs- arg-3 u--d 63) 1 63))) (lambda (u--v) (Main-sym arg-1 u--v arg-6)))))))))))) (lambda (u--opnd) (let ((sc4 (PreludeC-45EqOrd-u--C-60_Ord_Int 4 arg-2))) (cond ((equal? sc4 1) (let ((e-12 (car arg-6))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCar u--stack arg-6)) (lambda (u--scar) (let ((e-17 (car arg-6))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-MakeRib (let ((e-22 (vector-ref arg-1 4))) e-22) u--opnd (vector 0 0) u--scar arg-6)) (lambda (u--inter) (let ((e-22 (car arg-6))) (let ((e-24 (vector-ref e-22 1))) ((((e-24 'erased) 'erased) (Main-MakeRib (let ((e-27 (vector-ref arg-1 4))) e-27) u--inter (let ((e-29 (vector-ref arg-1 2))) e-29) (vector 0 1) arg-6)) (lambda (u--proc) (let ((e-27 (car arg-6))) (let ((e-29 (vector-ref e-27 1))) ((((e-29 'erased) 'erased) (Main-rCdr u--stack arg-6)) (lambda (stack-0) (let ((sc9 (Main-rIsRib stack-0))) (cond ((equal? sc9 1) (Main-addInstruction arg-1 (vector 0 3) u--proc stack-0 arg-6)) (else (let ((e-32 (car arg-6))) (let ((e-35 (vector-ref e-32 0))) (let ((e-37 (vector-ref e-35 1))) ((e-37 'erased) u--proc)))))))))))))))))))))))) (else (Main-addInstruction arg-1 (let ((sc5 (PreludeC-45EqOrd-u--C-60_Ord_Int 0 arg-2))) (cond ((equal? sc5 1) (vector 0 (bs- arg-2 1 63))) (else (vector 0 0)))) u--opnd u--stack arg-6)))))))))))))))))))))
(define Main-decodeStack (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getByte (let ((e-8 (vector-ref arg-1 3))) e-8) arg-3)) (lambda (u--x) (let ((x-0 (Main-getCode u--x))) (Main-decodeStackAux arg-1 0 x-0 x-0 arg-2 arg-3))))))))
(define Main-decodeAndRun (lambda (ext-0) (let ((act-24 ((csegen-39) ext-0))) (let ((act-25 (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (Main-MakeRib act-24 eta-0 eta-1 eta-2 eta-3))))))) (let ((act-26 (((((act-25 (vector 0 0)) (vector 0 0)) (vector 0 5)) (csegen-38)) ext-0))) (let ((act-27 (((((act-25 (vector 0 0)) (vector 0 0)) (vector 0 5)) (csegen-38)) ext-0))) (let ((act-28 (((((act-25 (vector 0 0)) (vector 0 0)) (vector 0 5)) (csegen-38)) ext-0))) (let ((act-29 ((csegen-39) ext-0))) (let ((u--state (vector act-26 act-27 act-28 act-29 act-24 act-28))) (let ((act-30 ((Main-getInt act-29 (csegen-38) 0) ext-0))) (let ((act-31 ((Main-buildSymtbl u--state act-30 (let ((e-5 (vector-ref u--state 5))) e-5) (csegen-38)) ext-0))) (let ((act-32 (vector (let ((e-0 (vector-ref u--state 0))) e-0) (let ((e-1 (vector-ref u--state 1))) e-1) (let ((e-2 (vector-ref u--state 2))) e-2) (let ((e-3 (vector-ref u--state 3))) e-3) (let ((e-4 (vector-ref u--state 4))) e-4) act-31))) (let ((act-33 ((Main-decodeStack act-32 (vector 0 0) (csegen-38)) ext-0))) (let ((act-34 ((Main-setupGlobal act-32 (csegen-38)) ext-0))) (let ((act-35 ((Main-rCar act-33 (csegen-38)) ext-0))) (let ((act-36 ((Main-rCgr act-35 (csegen-38)) ext-0))) (let ((act-37 (((((act-25 (vector 0 5)) (vector 0 0)) (vector 0 0)) (csegen-38)) ext-0))) (let ((act-38 (((((act-25 (vector 0 0)) (vector 0 0)) act-37) (csegen-38)) ext-0))) ((Main-run act-32 act-36 act-38 0 (csegen-38)) ext-0)))))))))))))))))))
(define Main-close (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-2 arg-3)) (lambda (u--x) (let ((e-7 (car arg-3))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCdr arg-2 arg-3)) (lambda (u--stack) (let ((e-12 (car arg-3))) (let ((e-14 (vector-ref e-12 1))) ((((e-14 'erased) 'erased) (Main-rCar u--x arg-3)) (lambda (u--xCar) (let ((e-17 (car arg-3))) (let ((e-19 (vector-ref e-17 1))) ((((e-19 'erased) 'erased) (Main-MakeRib (let ((e-22 (vector-ref arg-1 4))) e-22) u--xCar u--stack (vector 0 1) arg-3)) (lambda (u--newRib) (Main-rCons arg-1 u--newRib u--stack arg-3)))))))))))))))))))
(define Main-buildSymtbl (lambda (arg-1 arg-2 arg-3 arg-4) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int 0 arg-2))) (cond ((equal? sc0 1) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-addSymbol arg-1 (let ((e-9 (vector-ref arg-1 2))) e-9) arg-3 arg-4)) (lambda (u--sym) (Main-buildSymtbl arg-1 (bs- arg-2 1 63) u--sym arg-4)))))) (else (Main-buildChar arg-1 (let ((e-2 (vector-ref arg-1 2))) e-2) arg-3 arg-4))))))
(define Main-buildChar (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getByte (let ((e-8 (vector-ref arg-1 3))) e-8) arg-4)) (lambda (u--x) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--x (blodwen-toSignedInt 44 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-addSymbol arg-1 arg-2 arg-3 arg-4)) (lambda (u--sym) (Main-buildChar arg-1 (let ((e-14 (vector-ref arg-1 2))) e-14) u--sym arg-4)))))) (else (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--x (blodwen-toSignedInt 59 63)))) (cond ((equal? sc2 1) (Main-addSymbol arg-1 arg-2 arg-3 arg-4)) (else (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rCons arg-1 (vector 0 u--x) arg-2 arg-4)) (lambda (u--r) (Main-buildChar arg-1 u--r arg-3 arg-4)))))))))))))))))
(define Main-arg2 (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) arg-2))))))
(define Main-addSymbol (lambda (arg-1 arg-2 arg-3 arg-4) (let ((e-1 (car arg-4))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rListToString arg-1 arg-2 arg-4)) (lambda (u--lst) (let ((e-7 (car arg-4))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-rStringToUninternedSymbol arg-1 u--lst arg-4)) (lambda (u--sym) (Main-rCons arg-1 u--sym arg-3 arg-4)))))))))))
(define Main-addInstruction (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-rCar arg-4 arg-5)) (lambda (u--oscar) (let ((e-7 (car arg-5))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (Main-MakeRib (let ((e-12 (vector-ref arg-1 4))) e-12) arg-2 arg-3 u--oscar arg-5)) (lambda (u--newRib) (PreludeC-45Interfaces-C-62C-62 (let ((e-12 (car arg-5))) e-12) (Main-setCar arg-4 u--newRib arg-5) (lambda () (Main-decodeStack arg-1 arg-4 arg-5)))))))))))))
(define Main-MakeRib (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (let ((e-1 (car arg-5))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (Main-getAndIncrement arg-1 arg-5)) (lambda (u--v) (let ((e-7 (car arg-5))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (DataC-45IORef-newIORef arg-5 (vector u--v arg-2 arg-3 arg-4))) (lambda (u--ref) (let ((e-12 (car arg-5))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 1 u--ref)))))))))))))))
(define Main-C-61C-61 (lambda (arg-1 arg-2 arg-3) (case (vector-ref arg-1 0) ((0) (let ((e-0 (vector-ref arg-1 1))) (case (vector-ref arg-2 0) ((0) (let ((e-2 (vector-ref arg-2 1))) (let ((e-1 (car arg-3))) (let ((e-6 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int e-0 e-2)))))))(else (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) 0)))))))) ((1) (let ((e-1 (vector-ref arg-1 1))) (case (vector-ref arg-2 0) ((1) (let ((e-3 (vector-ref arg-2 1))) (let ((e-4 (car arg-3))) (let ((e-6 (vector-ref e-4 1))) ((((e-6 'erased) 'erased) (let ((e-8 (cdr arg-3))) ((e-8 'erased) (lambda (eta-0) (unbox e-1))))) (lambda (u--rib1) (let ((e-9 (car arg-3))) (let ((e-11 (vector-ref e-9 1))) ((((e-11 'erased) 'erased) (let ((e-13 (cdr arg-3))) ((e-13 'erased) (lambda (eta-0) (unbox e-3))))) (lambda (u--rib2) (let ((e-14 (car arg-3))) (let ((e-17 (vector-ref e-14 0))) (let ((e-19 (vector-ref e-17 1))) ((e-19 'erased) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int (let ((e-0 (vector-ref u--rib1 0))) e-0) (let ((e-0 (vector-ref u--rib2 0))) e-0))))))))))))))))(else (let ((e-3 (car arg-3))) (let ((e-6 (vector-ref e-3 0))) (let ((e-8 (vector-ref e-6 1))) ((e-8 'erased) 0))))))))(else (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) 0))))))))
(define System-exitWith (lambda (arg-2 arg-3) (if (null? arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit 0 eta-0))))) (let ((e-0 (car arg-3))) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (Builtin-believe_me (lambda (eta-0) (System-prim__exit e-0 eta-0)))))))))
(define System-exitFailure (lambda (arg-2) (System-exitWith arg-2 (cons 1 (vector 0 )))))
(define Builtin-idris_crash (lambda (ext-0) (blodwen-error-quit (string-append "ERROR: " ext-0))))
(define Builtin-believe_me (lambda (ext-0) ext-0))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (let ((sc1 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc1 0) 0)(else 1))))) (cond ((equal? sc0 1) (Builtin-believe_me arg-0)) (else 0)))))
(define PreludeC-45Num-u--div_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (bs/ arg-0 arg-1 63))(else (Builtin-idris_crash "Unhandled input for Prelude.Num.case block in div at Prelude.Num:120:3--122:40"))))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45Interfaces-C-62C-62 (lambda (arg-2 arg-3 arg-4) (let ((e-2 (vector-ref arg-2 1))) ((((e-2 'erased) 'erased) arg-3) (lambda (_-1843) (arg-4))))))
(define PrimIO-unsafePerformIO (lambda (arg-1) (PrimIO-unsafeCreateWorld (lambda (u--w) (arg-1 u--w)))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3 ext-0) (let ((act-5 (arg-3 ext-0))) (arg-2 act-5))))
(define PreludeC-45IO-putStrLn (lambda (arg-1 arg-2) (PreludeC-45IO-putStr arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0))))))
(define PreludeC-45IO-putChar (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putChar arg-2 eta-0))))))
(define PreludeC-45IO-getChar (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__getChar eta-0))))))
(define DataC-45IORef-newIORef (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (box arg-3))))) (lambda (u--m) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) u--m))))))))))
(define DataC-45IORef-modifyIORef (lambda (arg-2 arg-3 arg-4) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (unbox arg-3))))) (lambda (u--val) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (set-box! arg-3 (arg-4 u--val)))))))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (lambda (eta-0) (Main-main eta-0)))  (collect 4)
  (blodwen-run-finalisers)
  
  )